78. Subsets
Medium
12.8K
182
Companies

Given an integer array nums of unique elements, return all possible
subsets
(the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Example 2:

Input: nums = [0]
Output: [[],[0]]

 

Constraints:

    1 <= nums.length <= 10
    -10 <= nums[i] <= 10
    All the numbers of nums are unique.

Accepted
1.3M
Submissions
1.8M
Acceptance Rate
74.1%















class Solution {
public:

    vector<vector<int>> v;
    void help(vector<int>& nums ,vector<int> &k ,int index){
        if(index == nums.size()){
            v.push_back(k);
            // k.clear();
            return;
        }

        
        k.push_back(nums[index]);
        help(nums , k ,index+1);
        k.pop_back();
        index++;
        help(nums , k ,index);
        // k.clear();

    }
    vector<vector<int>> subsets(vector<int>& nums ) {
        // if(nums.size() == 0){
        //     v.push_back(k);
        //     k.clear();
        // }




        // vector<vector<int>> v;
        // vector<int> x;
        // v.push_back(x);
        // for(int i = 0; i<nums.size(); i++){
            
        // }
        vector<int> k;
        int index = 0;
        help(nums , k , 0);
        return v;
    }
};
